[debug] [2023-05-20T14:03:26.133Z] ----------------------------------------------------------------------
[debug] [2023-05-20T14:03:26.136Z] Command:       C:\Program Files\nodejs\node.exe C:\Users\raduc\AppData\Roaming\npm\node_modules\firebase-tools\lib\bin\firebase.js ext:install googlecloud/storage-extract-image-text --project=mydocvision
[debug] [2023-05-20T14:03:26.136Z] CLI Version:   12.1.0
[debug] [2023-05-20T14:03:26.136Z] Platform:      win32
[debug] [2023-05-20T14:03:26.137Z] Node Version:  v16.17.1
[debug] [2023-05-20T14:03:26.154Z] Time:          Sat May 20 2023 17:03:26 GMT+0300 (Eastern European Summer Time)
[debug] [2023-05-20T14:03:26.154Z] ----------------------------------------------------------------------
[debug] 
[debug] [2023-05-20T14:03:26.235Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] [2023-05-20T14:03:26.236Z] > authorizing via signed-in user (raduchelaru10@gmail.com)
[debug] [2023-05-20T14:03:26.236Z] [iam] checking project mydocvision for permissions ["firebase.projects.get","firebaseextensions.instances.create"]
[debug] [2023-05-20T14:03:26.238Z] > refreshing access token with scopes: []
[debug] [2023-05-20T14:03:26.239Z] >>> [apiv2][query] POST https://www.googleapis.com/oauth2/v3/token [none]
[debug] [2023-05-20T14:03:26.239Z] >>> [apiv2][body] POST https://www.googleapis.com/oauth2/v3/token [omitted]
[debug] [2023-05-20T14:03:26.494Z] <<< [apiv2][status] POST https://www.googleapis.com/oauth2/v3/token 200
[debug] [2023-05-20T14:03:26.495Z] <<< [apiv2][body] POST https://www.googleapis.com/oauth2/v3/token [omitted]
[debug] [2023-05-20T14:03:26.502Z] >>> [apiv2][query] POST https://cloudresourcemanager.googleapis.com/v1/projects/mydocvision:testIamPermissions [none]
[debug] [2023-05-20T14:03:26.502Z] >>> [apiv2][(partial)header] POST https://cloudresourcemanager.googleapis.com/v1/projects/mydocvision:testIamPermissions x-goog-quota-user=projects/mydocvision
[debug] [2023-05-20T14:03:26.502Z] >>> [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/mydocvision:testIamPermissions {"permissions":["firebase.projects.get","firebaseextensions.instances.create"]}
[debug] [2023-05-20T14:03:27.409Z] <<< [apiv2][status] POST https://cloudresourcemanager.googleapis.com/v1/projects/mydocvision:testIamPermissions 200
[debug] [2023-05-20T14:03:27.409Z] <<< [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/mydocvision:testIamPermissions {"permissions":["firebase.projects.get","firebaseextensions.instances.create"]}
[info] i  extensions: ensuring required API firebaseextensions.googleapis.com is enabled... 
[debug] [2023-05-20T14:03:27.411Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/mydocvision/services/firebaseextensions.googleapis.com [none]
[debug] [2023-05-20T14:03:27.411Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/mydocvision/services/firebaseextensions.googleapis.com x-goog-quota-user=projects/mydocvision
[debug] [2023-05-20T14:03:28.463Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/mydocvision/services/firebaseextensions.googleapis.com 200
[debug] [2023-05-20T14:03:28.463Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/mydocvision/services/firebaseextensions.googleapis.com [omitted]
[warn] !  extensions: missing required API firebaseextensions.googleapis.com. Enabling now... 
[debug] [2023-05-20T14:03:28.465Z] >>> [apiv2][query] POST https://serviceusage.googleapis.com/v1/projects/mydocvision/services/firebaseextensions.googleapis.com:enable [none]
[debug] [2023-05-20T14:03:28.465Z] >>> [apiv2][(partial)header] POST https://serviceusage.googleapis.com/v1/projects/mydocvision/services/firebaseextensions.googleapis.com:enable x-goog-quota-user=projects/mydocvision
[debug] [2023-05-20T14:03:30.089Z] <<< [apiv2][status] POST https://serviceusage.googleapis.com/v1/projects/mydocvision/services/firebaseextensions.googleapis.com:enable 200
[debug] [2023-05-20T14:03:30.090Z] <<< [apiv2][body] POST https://serviceusage.googleapis.com/v1/projects/mydocvision/services/firebaseextensions.googleapis.com:enable [omitted]
[debug] [2023-05-20T14:03:40.094Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/mydocvision/services/firebaseextensions.googleapis.com [none]
[debug] [2023-05-20T14:03:40.094Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/mydocvision/services/firebaseextensions.googleapis.com x-goog-quota-user=projects/mydocvision
[debug] [2023-05-20T14:03:41.253Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/mydocvision/services/firebaseextensions.googleapis.com 200
[debug] [2023-05-20T14:03:41.253Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/mydocvision/services/firebaseextensions.googleapis.com [omitted]
[info] +  extensions: required API firebaseextensions.googleapis.com is enabled 
[debug] [2023-05-20T14:03:41.259Z] >>> [apiv2][query] GET https://firebase.googleapis.com/v1beta1/projects/mydocvision [none]
[debug] [2023-05-20T14:03:41.766Z] <<< [apiv2][status] GET https://firebase.googleapis.com/v1beta1/projects/mydocvision 404
[debug] [2023-05-20T14:03:41.766Z] <<< [apiv2][body] GET https://firebase.googleapis.com/v1beta1/projects/mydocvision {"error":{"code":404,"message":"Requested entity was not found.","status":"NOT_FOUND"}}
[debug] [2023-05-20T14:03:41.767Z] HTTP Error: 404, Requested entity was not found.
[debug] [2023-05-20T14:03:41.925Z] FirebaseError: HTTP Error: 404, Requested entity was not found.
    at responseToError (C:\Users\raduc\AppData\Roaming\npm\node_modules\firebase-tools\lib\responseToError.js:49:12)
    at RetryOperation._fn (C:\Users\raduc\AppData\Roaming\npm\node_modules\firebase-tools\lib\apiv2.js:288:77)
    at processTicksAndRejections (node:internal/process/task_queues:96:5)
[error] 
[error] Error: Failed to get Firebase project mydocvision. Please make sure the project exists and your account has permission to access it.
[debug] [2023-05-20T14:04:19.008Z] ----------------------------------------------------------------------
[debug] [2023-05-20T14:04:19.010Z] Command:       C:\Program Files\nodejs\node.exe C:\Users\raduc\AppData\Roaming\npm\node_modules\firebase-tools\lib\bin\firebase.js ext:install googlecloud/storage-extract-image-text --project=mydocappointmentfe
[debug] [2023-05-20T14:04:19.010Z] CLI Version:   12.1.0
[debug] [2023-05-20T14:04:19.010Z] Platform:      win32
[debug] [2023-05-20T14:04:19.011Z] Node Version:  v16.17.1
[debug] [2023-05-20T14:04:19.011Z] Time:          Sat May 20 2023 17:04:19 GMT+0300 (Eastern European Summer Time)
[debug] [2023-05-20T14:04:19.012Z] ----------------------------------------------------------------------
[debug] 
[debug] [2023-05-20T14:04:19.104Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] [2023-05-20T14:04:19.104Z] > authorizing via signed-in user (raduchelaru10@gmail.com)
[debug] [2023-05-20T14:04:19.105Z] [iam] checking project mydocappointmentfe for permissions ["firebase.projects.get","firebaseextensions.instances.create"]
[debug] [2023-05-20T14:04:19.107Z] >>> [apiv2][query] POST https://cloudresourcemanager.googleapis.com/v1/projects/mydocappointmentfe:testIamPermissions [none]
[debug] [2023-05-20T14:04:19.107Z] >>> [apiv2][(partial)header] POST https://cloudresourcemanager.googleapis.com/v1/projects/mydocappointmentfe:testIamPermissions x-goog-quota-user=projects/mydocappointmentfe
[debug] [2023-05-20T14:04:19.108Z] >>> [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/mydocappointmentfe:testIamPermissions {"permissions":["firebase.projects.get","firebaseextensions.instances.create"]}
[debug] [2023-05-20T14:04:20.053Z] <<< [apiv2][status] POST https://cloudresourcemanager.googleapis.com/v1/projects/mydocappointmentfe:testIamPermissions 200
[debug] [2023-05-20T14:04:20.053Z] <<< [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/mydocappointmentfe:testIamPermissions {"permissions":["firebase.projects.get","firebaseextensions.instances.create"]}
[info] i  extensions: ensuring required API firebaseextensions.googleapis.com is enabled... 
[debug] [2023-05-20T14:04:20.055Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/mydocappointmentfe/services/firebaseextensions.googleapis.com [none]
[debug] [2023-05-20T14:04:20.055Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/mydocappointmentfe/services/firebaseextensions.googleapis.com x-goog-quota-user=projects/mydocappointmentfe
[debug] [2023-05-20T14:04:20.547Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/mydocappointmentfe/services/firebaseextensions.googleapis.com 200
[debug] [2023-05-20T14:04:20.547Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/mydocappointmentfe/services/firebaseextensions.googleapis.com [omitted]
[info] +  extensions: required API firebaseextensions.googleapis.com is enabled 
[debug] [2023-05-20T14:04:20.550Z] >>> [apiv2][query] GET https://firebase.googleapis.com/v1beta1/projects/mydocappointmentfe [none]
[debug] [2023-05-20T14:04:20.912Z] <<< [apiv2][status] GET https://firebase.googleapis.com/v1beta1/projects/mydocappointmentfe 200
[debug] [2023-05-20T14:04:20.912Z] <<< [apiv2][body] GET https://firebase.googleapis.com/v1beta1/projects/mydocappointmentfe {"projectId":"mydocappointmentfe","projectNumber":"215489991074","displayName":"mydocappointmentfe","name":"projects/mydocappointmentfe","resources":{"hostingSite":"mydocappointmentfe"},"state":"ACTIVE","etag":"1_03728338-8197-4206-ac38-49cac9cccd1f"}
[info] i  extensions: Checking project IAM policy... 
[debug] [2023-05-20T14:04:20.913Z] >>> [apiv2][query] GET https://firebaseextensions.googleapis.com/v1beta/projects/mydocappointmentfe/instances pageSize=100&pageToken=
[debug] [2023-05-20T14:04:22.043Z] <<< [apiv2][status] GET https://firebaseextensions.googleapis.com/v1beta/projects/mydocappointmentfe/instances 200
[debug] [2023-05-20T14:04:22.043Z] <<< [apiv2][body] GET https://firebaseextensions.googleapis.com/v1beta/projects/mydocappointmentfe/instances {}
[debug] [2023-05-20T14:04:22.043Z] >>> [apiv2][query] POST https://cloudresourcemanager.googleapis.com/v1/projects/mydocappointmentfe:getIamPolicy [none]
[debug] [2023-05-20T14:04:22.984Z] <<< [apiv2][status] POST https://cloudresourcemanager.googleapis.com/v1/projects/mydocappointmentfe:getIamPolicy 200
[debug] [2023-05-20T14:04:22.984Z] <<< [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/mydocappointmentfe:getIamPolicy {"version":1,"etag":"BwX8ID7dmvY=","bindings":[{"role":"roles/cloudfunctions.admin","members":["serviceAccount:firebase-adminsdk-h4lc6@mydocappointmentfe.iam.gserviceaccount.com"]},{"role":"roles/cloudfunctions.developer","members":["serviceAccount:github-action-637405541@mydocappointmentfe.iam.gserviceaccount.com"]},{"role":"roles/editor","members":["serviceAccount:215489991074@cloudservices.gserviceaccount.com"]},{"role":"roles/firebase.managementServiceAgent","members":["serviceAccount:firebase-service-account@firebase-sa-management.iam.gserviceaccount.com","serviceAccount:service-215489991074@gcp-sa-firebase.iam.gserviceaccount.com"]},{"role":"roles/firebase.sdkAdminServiceAgent","members":["serviceAccount:firebase-adminsdk-h4lc6@mydocappointmentfe.iam.gserviceaccount.com"]},{"role":"roles/firebaseauth.admin","members":["serviceAccount:firebase-adminsdk-h4lc6@mydocappointmentfe.iam.gserviceaccount.com","serviceAccount:github-action-637405541@mydocappointmentfe.iam.gserviceaccount.com"]},{"role":"roles/firebasehosting.admin","members":["serviceAccount:github-action-637405541@mydocappointmentfe.iam.gserviceaccount.com"]},{"role":"roles/firebasemods.serviceAgent","members":["serviceAccount:service-215489991074@gcp-sa-firebasemods.iam.gserviceaccount.com"]},{"role":"roles/firebaserules.system","members":["serviceAccount:service-215489991074@firebase-rules.iam.gserviceaccount.com"]},{"role":"roles/iam.serviceAccountTokenCreator","members":["serviceAccount:firebase-adminsdk-h4lc6@mydocappointmentfe.iam.gserviceaccount.com"]},{"role":"roles/owner","members":["user:catalin.11.munteanu@gmail.com","user:mihai2096@gmail.com","user:raduchelaru10@gmail.com"]},{"role":"roles/pubsub.serviceAgent","members":["serviceAccount:service-215489991074@gcp-sa-pubsub.iam.gserviceaccount.com"]},{"role":"roles/run.viewer","members":["serviceAccount:github-action-637405541@mydocappointmentfe.iam.gserviceaccount.com"]},{"role":"roles/serviceusage.apiKeysViewer","members":["serviceAccount:github-action-637405541@mydocappointmentfe.iam.gserviceaccount.com"]}]}
[debug] {"version":1,"etag":"BwX8ID7dmvY=","bindings":[{"role":"roles/cloudfunctions.admin","members":["serviceAccount:firebase-adminsdk-h4lc6@mydocappointmentfe.iam.gserviceaccount.com"]},{"role":"roles/cloudfunctions.developer","members":["serviceAccount:github-action-637405541@mydocappointmentfe.iam.gserviceaccount.com"]},{"role":"roles/editor","members":["serviceAccount:215489991074@cloudservices.gserviceaccount.com"]},{"role":"roles/firebase.managementServiceAgent","members":["serviceAccount:firebase-service-account@firebase-sa-management.iam.gserviceaccount.com","serviceAccount:service-215489991074@gcp-sa-firebase.iam.gserviceaccount.com"]},{"role":"roles/firebase.sdkAdminServiceAgent","members":["serviceAccount:firebase-adminsdk-h4lc6@mydocappointmentfe.iam.gserviceaccount.com"]},{"role":"roles/firebaseauth.admin","members":["serviceAccount:firebase-adminsdk-h4lc6@mydocappointmentfe.iam.gserviceaccount.com","serviceAccount:github-action-637405541@mydocappointmentfe.iam.gserviceaccount.com"]},{"role":"roles/firebasehosting.admin","members":["serviceAccount:github-action-637405541@mydocappointmentfe.iam.gserviceaccount.com"]},{"role":"roles/firebasemods.serviceAgent","members":["serviceAccount:service-215489991074@gcp-sa-firebasemods.iam.gserviceaccount.com"]},{"role":"roles/firebaserules.system","members":["serviceAccount:service-215489991074@firebase-rules.iam.gserviceaccount.com"]},{"role":"roles/iam.serviceAccountTokenCreator","members":["serviceAccount:firebase-adminsdk-h4lc6@mydocappointmentfe.iam.gserviceaccount.com"]},{"role":"roles/owner","members":["user:catalin.11.munteanu@gmail.com","user:mihai2096@gmail.com","user:raduchelaru10@gmail.com"]},{"role":"roles/pubsub.serviceAgent","members":["serviceAccount:service-215489991074@gcp-sa-pubsub.iam.gserviceaccount.com"]},{"role":"roles/run.viewer","members":["serviceAccount:github-action-637405541@mydocappointmentfe.iam.gserviceaccount.com"]},{"role":"roles/serviceusage.apiKeysViewer","members":["serviceAccount:github-action-637405541@mydocappointmentfe.iam.gserviceaccount.com"]}]}
[info] +  extensions: Project IAM policy OK 
[debug] [2023-05-20T14:04:22.990Z] >>> [apiv2][query] GET https://firebaseextensions.googleapis.com/v1beta/publishers/googlecloud/extensions/storage-extract-image-text [none]
[debug] [2023-05-20T14:04:23.895Z] <<< [apiv2][status] GET https://firebaseextensions.googleapis.com/v1beta/publishers/googlecloud/extensions/storage-extract-image-text 200
[debug] [2023-05-20T14:04:23.895Z] <<< [apiv2][body] GET https://firebaseextensions.googleapis.com/v1beta/publishers/googlecloud/extensions/storage-extract-image-text {"name":"publishers/googlecloud/extensions/storage-extract-image-text","ref":"googlecloud/storage-extract-image-text","latestVersion":"0.1.2","latestVersionCreateTime":"2023-05-10T14:36:13.353098Z","state":"PUBLISHED","createTime":"2023-05-09T06:20:29.282608Z","visibility":"UNLISTED","registryLaunchStage":"EXPERIMENTAL","iconUri":"https://storage.googleapis.com/firebase-extensions-icons/extension_icons/googlecloud/storage-extract-image-text_0.1.2@512.png","publisher":{"displayName":"Google Cloud","iconUri":"https://storage.googleapis.com/firebase-extensions-icons/publisher_icons/googlecloud/google-cloud-icon.png"},"repoUri":"https://github.com/googlecloudplatform/firebase-extensions","metrics":{"activeInstallCount":"10"},"tags":["ai","image","text-extraction","cloud-vision","image-recognition","image-classification","text-recognition","character-recognition","ocr","google-ai","cloud-vision-api"],"latestApprovedVersion":"0.1.2"}
[debug] [2023-05-20T14:04:23.896Z] >>> [apiv2][query] GET https://firebaseextensions.googleapis.com/v1beta/publishers/googlecloud/extensions/storage-extract-image-text/versions/0.1.2 [none]
[debug] [2023-05-20T14:04:24.814Z] <<< [apiv2][status] GET https://firebaseextensions.googleapis.com/v1beta/publishers/googlecloud/extensions/storage-extract-image-text/versions/0.1.2 200
[debug] [2023-05-20T14:04:24.814Z] <<< [apiv2][body] GET https://firebaseextensions.googleapis.com/v1beta/publishers/googlecloud/extensions/storage-extract-image-text/versions/0.1.2 {"name":"publishers/googlecloud/extensions/storage-extract-image-text/versions/0.1.2","ref":"googlecloud/storage-extract-image-text@0.1.2","spec":{"specVersion":"v1beta","name":"storage-extract-image-text","version":"0.1.2","description":"Extracts text from images and saves to Firestore using Cloud Vision API.","apis":[{"apiName":"vision.googleapis.com","reason":"Powers all Vision tasks performed by the extension."}],"roles":[{"role":"storage.admin","reason":"Allows the extension to write to your Cloud Storage."},{"role":"datastore.user","reason":"Allows the extension to write to your Firestore Database instance."}],"resources":[{"name":"extractText","type":"firebaseextensions.v1beta.function","propertiesYaml":"availableMemoryMb: 1024\neventTrigger:\n  eventType: google.storage.object.finalize\n  resource: projects/_/buckets/${param:IMG_BUCKET}\nlocation: ${param:LOCATION}\nruntime: nodejs16\n","description":"Listens to incoming Storage documents, executes OCR on them and writes extracted text to Firestore into a preconfigured collection.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Google Cloud","url":"https://cloud.google.com"},"contributors":[{"authorName":"Invertase","email":"oss@invertase.io","url":"https://github.com/invertase"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/GoogleCloudPlatform/firebase-extensions/tree/main/storage-extract-image-text/CHANGELOG.md","sourceUrl":"https://github.com/GoogleCloudPlatform/firebase-extensions/tree/main/storage-extract-image-text","params":[{"param":"LOCATION","label":"Cloud Functions location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. Realtime Database instances are located in `us-central1`. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"}],"default":"us-central1","immutable":true},{"param":"IMG_BUCKET","label":"Cloud Storage bucket for images","type":"STRING","description":"To which Cloud Storage bucket will you upload images from which you want to extract text?\n","required":true,"default":"${STORAGE_BUCKET}","example":"my-project-12345.appspot.com","validationRegex":"^([0-9a-z_.-]*)$","validationErrorMessage":"Invalid storage bucket"},{"param":"COLLECTION_PATH","label":"Collection path","type":"STRING","description":"What is the path to the collection where extracted text will be written to.\n","required":true,"default":"extractedText","example":"extractedText","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Must be a valid Cloud Firestore Collection"},{"param":"INCLUDE_PATH_LIST","label":"Paths that contain images you want to extract text from","type":"STRING","description":"Restrict storage-image-text-extraction to only extract text from images in specific locations in your Storage bucket by  supplying a comma-separated list of absolute paths. For example, specifying the paths `/users/pictures,/restaurants/menuItems` will process any images found in any subdirectories of `/users/pictures` and `/restaurants/menuItems`.\nYou may also use wildcard notation for directories in the path. For example, `/users/*/pictures` would exclude any images in any subdirectories of `/users/foo/pictures` as well as any images in subdirectories of `/users/bar/pictures`, but also any images in subdirectories of `/users/any/level/of/subdirectories/pictures`. \nIf you prefer not to explicitly exclude any directories of your Storage bucket, leave this field empty.\n","example":"/users/avatars,/design/pictures","validationRegex":"^(\\/[^\\s\\/\\,]+)+(\\,(\\/[^\\s\\/\\,]+)+)*$","validationErrorMessage":"Invalid paths, must be a comma-separated list of absolute path values."},{"param":"EXCLUDE_PATH_LIST","label":"List of absolute paths not included for image text extraction","type":"STRING","description":"Ensure storage-image-text-extraction does *not* process images in _specific locations_ in your Storage bucket by  supplying a comma-separated list of absolute paths. For example, to *exclude* the images  stored in the `/foo/alpha` and its subdirectories and `/bar/beta` and its subdirectories, specify the paths `/foo/alpha,/bar/beta`.\nYou may also use wildcard notation for directories in the path. For example, `/users/*/pictures` would exclude any images in any subdirectories of `/users/foo/pictures` as well as any images in subdirectories of `/users/bar/pictures`, but also any images in subdirectories of `/users/any/level/of/subdirectories/pictures`.\nIf you prefer to process every image uploaded to your Storage bucket,  leave this field empty.\n","example":"/users/avatars/thumbs,/design/pictures/thumbs","validationRegex":"^(\\/[^\\s\\/\\,]+)+(\\,(\\/[^\\s\\/\\,]+)+)*$","validationErrorMessage":"Invalid paths, must be a comma-separated list of absolute path values."},{"param":"DETAIL","label":"Amount of text extraction information to write to firestore.","type":"SELECT","description":"How much information should be written to firestore? Do you want just the extracted text written to firestore,  or the full data of the annotation? Select \\\"basic\\\" for the former, \\\"full\\\" for the later.\n","required":true,"options":[{"value":"basic","label":"Basic"},{"value":"full","label":"Full"}],"default":"basic"}],"preinstallContent":"This extension extracts text from jpg or png images uploaded to Cloud Storage and writes the extracted text to Firestore, using the Cloud Vision API.\n\nOn install, you will be asked to provide a Cloud Storage bucket where files will be uploaded, and a Firestore collection to write extracted text back to.\n\nWhenever a new jpg or png image is uploaded to the specified bucket, a Cloud Function will trigger that calls the Cloud Vision API to extract text, and stores the result in a new document with the ID matching the name of the file which was uploaded. (If the file was in a subfolder, the forward slashes will be converted to underscores.)\n\n### Use Cases\n\n* **Optical character recognition (OCR) for scanned documents**: Extract and store text from scanned documents to make them searchable and accessible in your application.\n* **Reading text from images in a social media app**: Automatically extract and analyze text from user images to identify trends or inappropriate content.\n* **Extracting menu items from restaurant images**: Create a food ordering app that allows users to upload images of menus and automatically extracts and displays the menu items in a structured format.\n\n### Including Cloud Storage paths\n\nThe extension provides a `include path list` parameter. Setting this parameter will restrict the extension to only extract text from images in specific locations in your Storage bucket.\n\nIf this parameter is not set, then images uploaded to all paths from the given bucket will trigger text extraction.\n\nFor example, specifying the paths `/users/pictures,/restaurants/menuItems` will extract text from any images found in any subdirectories of `/users/pictures` and `/restaurants/menuItems`. You may also use wildcard notation for directories in the path.\n\n### Excluding Cloud Storage paths\n\nAlternatively, the extension also provides a `exclude path list` parameter. This parameter is a list of absolute paths not included for extract text from images.\n\nSetting is will ensure the extension does not extract text from images in the specific locations.\n\nFor example, to exclude the images stored in the `/foo/alpha` and its subdirectories and `/bar/beta` and its subdirectories, specify the paths `/foo/alpha,/bar/beta`. You may also use wildcard notation for directories in the path.\n\n### Detail\n\nThe extension also allows you to control whether you would like to store just extracted text, or all returned metadata from Cloud Vision AI. If set to \"basic\" the extension will simply write the extracted text as a string field. If set to \"full\" then the full information returned from Cloud Vision AI will be written to the Firestore document.\n\n## Additional Setup\n\nEnsure you have a [Cloud Firestore database](https://firebase.google.com/docs/firestore/quickstart) and [Cloud Storage bucket](https://firebase.google.com/docs/storage) set up in your Firebase project.\n\n## Billing\n\nThis extension uses other Firebase or Google Cloud Platform services which may have associated charges:\n\n* [Cloud Vision AI](https://cloud.google.com/vision#section-11)\n* Cloud Storage\n* Cloud Firestore\n* Cloud Functions (See [FAQs](https://firebase.google.com/support/faq#extensions-pricing))\n\nWhen you use Firebase Extensions, you're only charged for the underlying resources that you use. A paid-tier (Blaze) billing plan is required because the extension uses Cloud Vision API.\n","postinstallContent":"### See it in action\n\nYou can test out this extension right away!\n\n1.  Go to your [Storage dashboard](https://console.firebase.google.com/project/${param:PROJECT_ID}/storage) in the Firebase console.\n\n1.  Upload an image file to the bucket: `${param:IMG_BUCKET}`\n    \n    Note the file must be within the directories `${param:INCLUDE_PATH_LIST}` if set, and not in the directories `${param:EXCLUDE_PATH_LIST}` if it set. \n\n1.  In a few seconds, the extracted text will appear in the `${param:COLLECTION_PATH}` Firestore collection.\n\n    Note that you might need to refresh the page to see changes.\n\n### Using the extension\n\nYou can upload images using the [Cloud Storage for Firebase SDK](https://firebase.google.com/docs/storage/) for your platform (iOS, Android, or Web). Alternatively, you can upload images directly in the Firebase console's Storage dashboard.\n\nWhenever you upload an image to the specified bucket and directory, this extension will extract text from any images uploaded to a specific Cloud Storage bucket, and write the extracted text to Firestore, under the name of the file that was uploaded.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\n### Further reading & resources","readmeContent":"# Extract Image Text with Cloud Vision AI\n\n**Author**: Google Cloud (**[https://cloud.google.com](https://cloud.google.com)**)\n\n**Description**: Extracts text from images and saves to Firestore using Cloud Vision API.\n\n\n\n**Details**: This extension extracts text from jpg or png images uploaded to Cloud Storage and writes the extracted text to Firestore, using the Cloud Vision API.\n\nOn install, you will be asked to provide a Cloud Storage bucket where files will be uploaded, and a Firestore collection to write extracted text back to.\n\nWhenever a new jpg or png image is uploaded to the specified bucket, a Cloud Function will trigger that calls the Cloud Vision API to extract text, and stores the result in a new document with the ID matching the name of the file which was uploaded. (If the file was in a subfolder, the forward slashes will be converted to underscores.)\n\n### Use Cases\n\n* **Optical character recognition (OCR) for scanned documents**: Extract and store text from scanned documents to make them searchable and accessible in your application.\n* **Reading text from images in a social media app**: Automatically extract and analyze text from user images to identify trends or inappropriate content.\n* **Extracting menu items from restaurant images**: Create a food ordering app that allows users to upload images of menus and automatically extracts and displays the menu items in a structured format.\n\n### Including Cloud Storage paths\n\nThe extension provides a `include path list` parameter. Setting this parameter will restrict the extension to only extract text from images in specific locations in your Storage bucket.\n\nIf this parameter is not set, then images uploaded to all paths from the given bucket will trigger text extraction.\n\nFor example, specifying the paths `/users/pictures,/restaurants/menuItems` will extract text from any images found in any subdirectories of `/users/pictures` and `/restaurants/menuItems`. You may also use wildcard notation for directories in the path.\n\n### Excluding Cloud Storage paths\n\nAlternatively, the extension also provides a `exclude path list` parameter. This parameter is a list of absolute paths not included for extract text from images.\n\nSetting is will ensure the extension does not extract text from images in the specific locations.\n\nFor example, to exclude the images stored in the `/foo/alpha` and its subdirectories and `/bar/beta` and its subdirectories, specify the paths `/foo/alpha,/bar/beta`. You may also use wildcard notation for directories in the path.\n\n### Detail\n\nThe extension also allows you to control whether you would like to store just extracted text, or all returned metadata from Cloud Vision AI. If set to \"basic\" the extension will simply write the extracted text as a string field. If set to \"full\" then the full information returned from Cloud Vision AI will be written to the Firestore document.\n\n## Additional Setup\n\nEnsure you have a [Cloud Firestore database](https://firebase.google.com/docs/firestore/quickstart) and [Cloud Storage bucket](https://firebase.google.com/docs/storage) set up in your Firebase project.\n\n## Billing\n\nThis extension uses other Firebase or Google Cloud Platform services which may have associated charges:\n\n* [Cloud Vision AI](https://cloud.google.com/vision#section-11)\n* Cloud Storage\n* Cloud Firestore\n* Cloud Functions (See [FAQs](https://firebase.google.com/support/faq#extensions-pricing))\n\nWhen you use Firebase Extensions, you're only charged for the underlying resources that you use. A paid-tier (Blaze) billing plan is required because the extension uses Cloud Vision API.\n\n\n\n\n**Configuration Parameters:**\n\n* Cloud Functions location: Where do you want to deploy the functions created for this extension? You usually want a location close to your database. Realtime Database instances are located in `us-central1`. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).\n\n* Cloud Storage bucket for images: To which Cloud Storage bucket will you upload images from which you want to extract text?\n\n\n* Collection path: What is the path to the collection where extracted text will be written to.\n\n\n* Paths that contain images you want to extract text from: Restrict storage-image-text-extraction to only extract text from images in specific locations in your Storage bucket by  supplying a comma-separated list of absolute paths. For example, specifying the paths `/users/pictures,/restaurants/menuItems` will process any images found in any subdirectories of `/users/pictures` and `/restaurants/menuItems`.\nYou may also use wildcard notation for directories in the path. For example, `/users/*/pictures` would exclude any images in any subdirectories of `/users/foo/pictures` as well as any images in subdirectories of `/users/bar/pictures`, but also any images in subdirectories of `/users/any/level/of/subdirectories/pictures`. \nIf you prefer not to explicitly exclude any directories of your Storage bucket, leave this field empty.\n\n\n* List of absolute paths not included for image text extraction: Ensure storage-image-text-extraction does *not* process images in _specific locations_ in your Storage bucket by  supplying a comma-separated list of absolute paths. For example, to *exclude* the images  stored in the `/foo/alpha` and its subdirectories and `/bar/beta` and its subdirectories, specify the paths `/foo/alpha,/bar/beta`.\nYou may also use wildcard notation for directories in the path. For example, `/users/*/pictures` would exclude any images in any subdirectories of `/users/foo/pictures` as well as any images in subdirectories of `/users/bar/pictures`, but also any images in subdirectories of `/users/any/level/of/subdirectories/pictures`.\nIf you prefer to process every image uploaded to your Storage bucket,  leave this field empty.\n\n\n* Amount of text extraction information to write to firestore.: How much information should be written to firestore? Do you want just the extracted text written to firestore,  or the full data of the annotation? Select \\\"basic\\\" for the former, \\\"full\\\" for the later.\n\n\n\n\n**Cloud Functions:**\n\n* **extractText:** Listens to incoming Storage documents, executes OCR on them and writes extracted text to Firestore into a preconfigured collection.\n\n\n\n**APIs Used**:\n\n* vision.googleapis.com (Reason: Powers all Vision tasks performed by the extension.)\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* storage.admin (Reason: Allows the extension to write to your Cloud Storage.)\n\n* datastore.user (Reason: Allows the extension to write to your Firestore Database instance.)\n","displayName":"Extract Image Text with Cloud Vision AI","systemParams":[{"param":"firebaseextensions.v1beta.function/memory","label":"Function memory","type":"SELECT","description":"How much memory should be allocated to each function?","options":[{"value":"128","label":"128MB"},{"value":"256","label":"256MB"},{"value":"512","label":"512MB"},{"value":"1024","label":"1GB"},{"value":"2048","label":"2GB"},{"value":"4096","label":"4GB"},{"value":"8192","label":"8GB"}],"default":"256","advanced":true},{"param":"firebaseextensions.v1beta.function/timeoutSeconds","label":"Function timeout seconds","type":"STRING","description":"How long should functions run before timing out, in seconds (0-540)?","validationRegex":"^[1-9][0-9]{0,2}$","validationErrorMessage":"Function timeout should be an integer number of seconds, between 0 and 540","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnector","label":"VPC Connector","type":"STRING","description":"The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is projects/*/locations/*/connectors/*.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/connectors/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnectorEgressSettings","label":"VPC Connector Egress settings","type":"SELECT","description":"Controls outgoing traffic when a VPC connector is configured","options":[{"value":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","label":"Unspecified"},{"value":"PRIVATE_RANGES_ONLY","label":"Private ranges only"},{"value":"ALL_TRAFFIC","label":"All traffic"}],"default":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","advanced":true},{"param":"firebaseextensions.v1beta.function/minInstances","label":"Minimum function instances","type":"STRING","description":"The minimum number of instances of each function to run at once (0-1000)","default":"0","validationRegex":"^[0-9]*$","validationErrorMessage":"Min instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/maxInstances","label":"Maximum function instances","type":"STRING","description":"The maximum number of instances of each function to run at once","default":"3000","validationRegex":"^[0-9]*$","validationErrorMessage":"Max instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/ingressSettings","label":"Function ingress settings","type":"SELECT","description":"Where should functions allow incoming traffic from?","options":[{"value":"ALLOW_ALL","label":"Allow all"},{"value":"ALLOW_INTERNAL_ONLY","label":"Allow internal only"},{"value":"ALLOW_INTERNAL_AND_GCLB","label":"Allow internal and GCLB"}],"advanced":true},{"param":"firebaseextensions.v1beta.function/labels","label":"Function labels","type":"STRING","description":"Do you wish to set any labels on this instance's Cloud Functions? If so, provide up to 55 labels in the format 'key1:value, key2:value'","validationRegex":"^([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63},\\s*)*([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63})$","advanced":true}],"icon":"icon.png","tags":["ai","image","text-extraction","cloud-vision","image-recognition","image-classification","text-recognition","character-recognition","ocr","google-ai","cloud-vision-api"]},"state":"PUBLISHED","hash":"1f5b1700b813883dab36c1c0a75e7873e5d066850d85ebc3e460bde9b9fa9921","createTime":"2023-05-10T14:36:13.353098Z","sourceDownloadUri":"https://storage.googleapis.com/firebase-mod-sources-prod/1f5b1700b813883dab36c1c0a75e7873e5d066850d85ebc3e460bde9b9fa9921","id":"0.1.2","releaseNotes":"Writes to Firestore with URL stored in \"file\" document field rather than as document ID.\n","buildSourceUri":"https://github.com/googlecloudplatform/firebase-extensions/tree/861a4dc12e04a2064ba7db831e286b9675cbf3ed","icons":[{"iconUri":"https://storage.googleapis.com/firebase-extensions-icons/extension_icons/googlecloud/storage-extract-image-text_0.1.2@512.png","iconType":"PNG_512"}],"listing":{"state":"APPROVED"},"metrics":{"activeInstallCount":"10"},"tags":["ai","image","text-extraction","cloud-vision","image-recognition","image-classification","text-recognition","character-recognition","ocr","google-ai","cloud-vision-api"],"extensionRoot":"storage-extract-image-text"}
[debug] [2023-05-20T14:04:24.819Z] >>> [apiv2][query] GET https://iam.googleapis.com/v1/roles/storage.admin [none]
[debug] [2023-05-20T14:04:24.820Z] >>> [apiv2][query] GET https://iam.googleapis.com/v1/roles/datastore.user [none]
[debug] [2023-05-20T14:04:25.993Z] <<< [apiv2][status] GET https://iam.googleapis.com/v1/roles/storage.admin 200
[debug] [2023-05-20T14:04:25.993Z] <<< [apiv2][body] GET https://iam.googleapis.com/v1/roles/storage.admin {"name":"roles/storage.admin","title":"Storage Admin","description":"Full control of GCS resources.","includedPermissions":["firebase.projects.get","orgpolicy.policy.get","recommender.iamPolicyInsights.get","recommender.iamPolicyInsights.list","recommender.iamPolicyInsights.update","recommender.iamPolicyRecommendations.get","recommender.iamPolicyRecommendations.list","recommender.iamPolicyRecommendations.update","resourcemanager.projects.get","resourcemanager.projects.list","storage.buckets.create","storage.buckets.createTagBinding","storage.buckets.delete","storage.buckets.deleteTagBinding","storage.buckets.get","storage.buckets.getIamPolicy","storage.buckets.getObjectInsights","storage.buckets.list","storage.buckets.listEffectiveTags","storage.buckets.listTagBindings","storage.buckets.setIamPolicy","storage.buckets.update","storage.multipartUploads.abort","storage.multipartUploads.create","storage.multipartUploads.list","storage.multipartUploads.listParts","storage.objects.create","storage.objects.delete","storage.objects.get","storage.objects.getIamPolicy","storage.objects.list","storage.objects.setIamPolicy","storage.objects.update"],"stage":"GA","etag":"AA=="}
[debug] [2023-05-20T14:04:26.025Z] <<< [apiv2][status] GET https://iam.googleapis.com/v1/roles/datastore.user 200
[debug] [2023-05-20T14:04:26.025Z] <<< [apiv2][body] GET https://iam.googleapis.com/v1/roles/datastore.user {"name":"roles/datastore.user","title":"Cloud Datastore User","description":"Provides read/write access to data in a Cloud Datastore database. Intended for application developers and service accounts.","includedPermissions":["appengine.applications.get","datastore.databases.get","datastore.databases.getMetadata","datastore.databases.list","datastore.entities.allocateIds","datastore.entities.create","datastore.entities.delete","datastore.entities.get","datastore.entities.list","datastore.entities.update","datastore.indexes.list","datastore.namespaces.get","datastore.namespaces.list","datastore.statistics.get","datastore.statistics.list","resourcemanager.projects.get","resourcemanager.projects.list"],"stage":"GA","etag":"AA=="}
[info] i  extensions: information about 'googlecloud/storage-extract-image-text@0.1.2': 
[info] Name: Extract Image Text with Cloud Vision AI
Publisher: googlecloud
Description: Extracts text from images and saves to Firestore using Cloud Vision API.
License: Apache-2.0
Source code: https://github.com/GoogleCloudPlatform/firebase-extensions/tree/main/storage-extract-image-text
APIs used by this Extension:
  vision.googleapis.com (Powers all Vision tasks performed by the extension.)
Roles granted to this Extension:
  Storage Admin (Full control of GCS resources.)
  Cloud Datastore User (Provides read/write access to data in a Cloud Datastore database. Intended for application developers and service accounts.)

[debug] [2023-05-20T14:04:30.369Z] >>> [apiv2][query] GET https://firebase.googleapis.com/v1beta1/projects/mydocappointmentfe/adminSdkConfig [none]
[debug] [2023-05-20T14:04:30.677Z] <<< [apiv2][status] GET https://firebase.googleapis.com/v1beta1/projects/mydocappointmentfe/adminSdkConfig 200
[debug] [2023-05-20T14:04:30.677Z] <<< [apiv2][body] GET https://firebase.googleapis.com/v1beta1/projects/mydocappointmentfe/adminSdkConfig {"projectId":"mydocappointmentfe","storageBucket":"mydocappointmentfe.appspot.com"}
[debug] [2023-05-20T14:04:30.678Z] >>> [apiv2][query] GET https://firebase.googleapis.com/v1beta1/projects/mydocappointmentfe [none]
[debug] [2023-05-20T14:04:31.036Z] <<< [apiv2][status] GET https://firebase.googleapis.com/v1beta1/projects/mydocappointmentfe 200
[debug] [2023-05-20T14:04:31.036Z] <<< [apiv2][body] GET https://firebase.googleapis.com/v1beta1/projects/mydocappointmentfe {"projectId":"mydocappointmentfe","projectNumber":"215489991074","displayName":"mydocappointmentfe","name":"projects/mydocappointmentfe","resources":{"hostingSite":"mydocappointmentfe"},"state":"ACTIVE","etag":"1_03728338-8197-4206-ac38-49cac9cccd1f"}
[info] i  extensions: answer the questions below to configure your extension: 
[info] 
Cloud Functions location: Where do you want to deploy the functions created for this extension? You usually want a location close to your database. Realtime Database instances are located in us-central1. For help selecting a location, refer to the location selection guide (https://firebase.google.com/docs/functions/locations).
[info] 
Cloud Storage bucket for images: To which Cloud Storage bucket will you upload images from which you want to extract text?
[info] 
Collection path: What is the path to the collection where extracted text will be written to.
[info] 
Paths that contain images you want to extract text from (Optional): Restrict storage-image-text-extraction to only extract text from images in specific locations in your Storage bucket by  supplying a comma-separated list of absolute paths. For example, specifying the paths /users/pictures,/restaurants/menuItems will process any images found in any subdirectories of /users/pictures and /restaurants/menuItems.
You may also use wildcard notation for directories in the path. For example, /users/*/pictures would exclude any images in any subdirectories of /users/foo/pictures as well as any images in subdirectories of /users/bar/pictures, but also any images in subdirectories of /users/any/level/of/subdirectories/pictures. 
If you prefer not to explicitly exclude any directories of your Storage bucket, leave this field empty.
